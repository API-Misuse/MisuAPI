/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

/*
plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}
*/
plugins {
    id 'java'
    id 'jacoco'
}
//apply plugin: 'java'
//apply plugin: 'jacoco'

repositories {
	mavenLocal()
    mavenCentral()
    maven { url '/home/apr/env/mavenDownload/' }

    // Use JCenter for resolving dependencies.
    jcenter()
}

version = '0.0.1'
group = 'Python_Patch_Parser'

/*
tasks.named("test") {
    useJUnitPlatform()
}
*/

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
	//implementation 'com.google.guava:guava:29.0-jre'
    
    // https://mvnrepository.com/artifact/com.github.gumtreediff/core
	//implementation 'com.github.gumtreediff:gumtree:3.0.0-SNAPSHOT'
	
	// https://mvnrepository.com/artifact/com.github.gumtreediff/core
	//runtimeOnly group: 'com.github.gumtreediff', name: 'core', version: '2.1.2'
	//implementation 'com.github.gumtreediff:core:2.1.2'
	
	implementation fileTree(dir: "/home/apr/apr_tools/GumTree_repos/gumtree/dist/build/install/gumtree/lib-1", includes: ['*.jar']) 
	/*{
		exclude "org.slf4j:slf4j-log4j12:21"
	}*/
    
    // parameter parser
    implementation "commons-cli:commons-cli:1.4"
    
    // for logging
    implementation "org.slf4j:slf4j-log4j12:1.7.25"
    implementation "org.slf4j:slf4j-api:1.7.25"   
    
    //testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    //testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}


/*

// Do not generate reports for individual projects
tasks.named("jacocoTestReport") {
    enabled = false
}

// Share sources folder with other projects for aggregated JaCoCo reports
configurations.create('transitiveSourcesElements') {
    visible = false
    canBeResolved = false
    canBeConsumed = true
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'source-folders'))
    }
    sourceSets.main.java.srcDirs.forEach {
        outgoing.artifact(it)
    }
}

// Share the coverage data to be aggregated for the whole product
configurations.create('coverageDataElements') {
    visible = false
    canBeResolved = false
    canBeConsumed = true
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'jacoco-coverage-data'))
    }
    // This will cause the test task to run if the coverage data is requested by the aggregation task
    outgoing.artifact(tasks.named("test").map { task ->
        task.extensions.getByType(JacocoTaskExtension).destinationFile
    })
}*/


/*
// A resolvable configuration to collect source code
def sourcesPath = configurations.create("sourcesPath") {
    visible = false
    canBeResolved = true
    canBeConsumed = false
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'source-folders'))
    }
}

// A resolvable configuration to collect JaCoCo coverage data
def coverageDataPath = configurations.create("coverageDataPath") {
    visible = false
    canBeResolved = true
    canBeConsumed = false
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'jacoco-coverage-data'))
    }
}

// Task to gather code coverage from multiple subprojects
def codeCoverageReport = tasks.register('codeCoverageReport', JacocoReport) {
    additionalClassDirs(configurations.runtimeClasspath)
    additionalSourceDirs(sourcesPath.incoming.artifactView { lenient(true) }.files)
    executionData(coverageDataPath.incoming.artifactView { lenient(true) }.files.filter { it.exists() })

    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.enabled true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.enabled true
    }
}

// Make JaCoCo report generation part of the 'check' lifecycle phase
tasks.named("check") {
    dependsOn(codeCoverageReport)
}
*/


jacocoTestReport {
    reports {
        xml.enabled false
        html.enabled true
    }
}

check.dependsOn jacocoTestReport