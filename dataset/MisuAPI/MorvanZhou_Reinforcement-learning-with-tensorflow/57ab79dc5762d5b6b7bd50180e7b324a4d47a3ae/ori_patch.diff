commit 57ab79dc5762d5b6b7bd50180e7b324a4d47a3ae
Author: Min Kyung Lee <minke7@naver.com>
Date:   Wed Feb 12 21:32:33 2020 +0900

    [revised] .ix to .loc and [add] .astype for .argmax() typeerror

diff --git a/contents/11_Dyna_Q/RL_brain.py b/contents/11_Dyna_Q/RL_brain.py
index 2fb39aa..23fa6fc 100644
--- a/contents/11_Dyna_Q/RL_brain.py
+++ b/contents/11_Dyna_Q/RL_brain.py
@@ -15,16 +15,23 @@ class QLearningTable:
         self.lr = learning_rate
         self.gamma = reward_decay
         self.epsilon = e_greedy
-        self.q_table = pd.DataFrame(columns=self.actions)
+
+        ## argmax type error
+        self.q_table = pd.DataFrame(columns=self.actions).astype('float32')
 
     def choose_action(self, observation):
         self.check_state_exist(observation)
         # action selection
         if np.random.uniform() < self.epsilon:
             # choose best action
-            state_action = self.q_table.ix[observation, :]
+
+
+            # state_action = self.q_table.ix[observation, :]
+            state_action = self.q_table.loc[observation, :]             # for label indexing
             state_action = state_action.reindex(np.random.permutation(state_action.index))     # some actions have same value
             action = state_action.argmax()
+
+
         else:
             # choose random action
             action = np.random.choice(self.actions)
@@ -32,12 +39,13 @@ class QLearningTable:
 
     def learn(self, s, a, r, s_):
         self.check_state_exist(s_)
-        q_predict = self.q_table.ix[s, a]
+
+        q_predict = self.q_table.loc[s, a]
         if s_ != 'terminal':
-            q_target = r + self.gamma * self.q_table.ix[s_, :].max()  # next state is not terminal
+            q_target = r + self.gamma * self.q_table.loc[s_, :].max()  # next state is not terminal
         else:
             q_target = r  # next state is terminal
-        self.q_table.ix[s, a] += self.lr * (q_target - q_predict)  # update
+        self.q_table.loc[s, a] += self.lr * (q_target - q_predict)  # update
 
     def check_state_exist(self, state):
         if state not in self.q_table.index:
@@ -71,9 +79,9 @@ class EnvModel:
 
     def sample_s_a(self):
         s = np.random.choice(self.database.index)
-        a = np.random.choice(self.database.ix[s].dropna().index)    # filter out the None value
+        a = np.random.choice(self.database.loc[s].dropna().index)    # filter out the None value
         return s, a
 
     def get_r_s_(self, s, a):
-        r, s_ = self.database.ix[s, a]
+        r, s_ = self.database.loc[s, a]
         return r, s_
