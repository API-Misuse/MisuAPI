commit ad1811aa72654f070da10e4c8313d2556a356e5c
Author: tfx-team <tensorflow-extended-nonhuman@googlegroups.com>
Date:   Tue Jan 14 14:07:39 2020 -0800

    Allow deserialization of serialized JSON artifact, even if concrete class cannot be resolved.
    
    PiperOrigin-RevId: 289726893

diff --git a/tfx/types/artifact.py b/tfx/types/artifact.py
index 96452675..76ffbf2e 100644
--- a/tfx/types/artifact.py
+++ b/tfx/types/artifact.py
@@ -24,6 +24,8 @@ import importlib
 import json
 from typing import Any, Dict, Optional, Text
 
+import absl
+
 from google.protobuf import json_format
 from ml_metadata.proto import metadata_store_pb2
 from tfx.utils import json_utils
@@ -268,12 +270,24 @@ class Artifact(json_utils.Jsonable):
   def from_json_dict(cls, dict_data: Dict[Text, Any]) -> Any:
     module_name = dict_data['__artifact_class_module__']
     class_name = dict_data['__artifact_class_name__']
-    artifact_cls = getattr(importlib.import_module(module_name), class_name)
     artifact = metadata_store_pb2.Artifact()
-    json_format.Parse(json.dumps(dict_data['artifact']), artifact)
     artifact_type = metadata_store_pb2.ArtifactType()
+    json_format.Parse(json.dumps(dict_data['artifact']), artifact)
     json_format.Parse(json.dumps(dict_data['artifact_type']), artifact_type)
-    result = artifact_cls()
+
+    # First, try to resolve the specific class used for the artifact; if this
+    # is not possible, use a generic artifact.Artifact object.
+    try:
+      artifact_cls = getattr(importlib.import_module(module_name), class_name)
+      result = artifact_cls()
+    except (AttributeError, ImportError):
+      absl.logging.warning((
+          'Could not load artifact class %s.%s; using fallback deserialization '
+          'for the relevant artifact. This behavior may not be supported in '
+          'the future; please make sure that any artifact classes can be '
+          'imported within your container or environment.') %
+                           (module_name, class_name))
+      result = Artifact(mlmd_artifact_type=artifact_type)
     result.set_mlmd_artifact_type(artifact_type)
     result.set_mlmd_artifact(artifact)
     return result
diff --git a/tfx/types/artifact_test.py b/tfx/types/artifact_test.py
index 0617009b..02808dd7 100644
--- a/tfx/types/artifact_test.py
+++ b/tfx/types/artifact_test.py
@@ -21,6 +21,9 @@ from __future__ import unicode_literals
 
 # Standard Imports
 
+import absl
+import mock
+
 import tensorflow as tf
 from ml_metadata.proto import metadata_store_pb2
 from tfx.types import artifact
@@ -29,6 +32,12 @@ from tfx.utils import json_utils
 
 class _MyArtifact(artifact.Artifact):
   TYPE_NAME = 'MyTypeName'
+  PROPERTIES = {
+      'int1': artifact.Property(type=artifact.PropertyType.INT),
+      'int2': artifact.Property(type=artifact.PropertyType.INT),
+      'string1': artifact.Property(type=artifact.PropertyType.STRING),
+      'string2': artifact.Property(type=artifact.PropertyType.STRING),
+  }
 
 
 class ArtifactTest(tf.test.TestCase):
@@ -120,17 +129,7 @@ class ArtifactTest(tf.test.TestCase):
       MyNewArtifact(mlmd_artifact_type=metadata_store_pb2.ArtifactType())
 
   def testArtifactProperties(self):
-
-    class MyCustomArtifact(artifact.Artifact):
-      TYPE_NAME = 'MyCustomArtifact'
-      PROPERTIES = {
-          'int1': artifact.Property(type=artifact.PropertyType.INT),
-          'int2': artifact.Property(type=artifact.PropertyType.INT),
-          'string1': artifact.Property(type=artifact.PropertyType.STRING),
-          'string2': artifact.Property(type=artifact.PropertyType.STRING),
-      }
-
-    my_artifact = MyCustomArtifact()
+    my_artifact = _MyArtifact()
     self.assertEqual(0, my_artifact.int1)
     self.assertEqual(0, my_artifact.int2)
     my_artifact.int1 = 111
@@ -163,6 +162,45 @@ class ArtifactTest(tf.test.TestCase):
         'message'):
       artifact.Artifact('StringTypeName')
 
+  @mock.patch('absl.logging.warning')
+  def testDeserialize(self, *unused_mocks):
+    original = _MyArtifact()
+    original.uri = '/my/path'
+    original.int1 = 111
+    original.int2 = 222
+    original.string1 = '111'
+    original.string2 = '222'
+
+    serialized = original.to_json_dict()
+
+    rehydrated = artifact.Artifact.from_json_dict(serialized)
+    absl.logging.warning.assert_not_called()
+    self.assertIs(rehydrated.__class__, _MyArtifact)
+    self.assertEqual(rehydrated.int1, 111)
+    self.assertEqual(rehydrated.int2, 222)
+    self.assertEqual(rehydrated.string1, '111')
+    self.assertEqual(rehydrated.string2, '222')
+
+  @mock.patch('absl.logging.warning')
+  def testDeserializeUnknownArtifactClass(self, *unused_mocks):
+    original = _MyArtifact()
+    original.uri = '/my/path'
+    original.int1 = 111
+    original.int2 = 222
+    original.string1 = '111'
+    original.string2 = '222'
+
+    serialized = original.to_json_dict()
+    serialized['__artifact_class_name__'] = 'MissingClassName'
+
+    rehydrated = artifact.Artifact.from_json_dict(serialized)
+    absl.logging.warning.assert_called_once()
+    self.assertIs(rehydrated.__class__, artifact.Artifact)
+    self.assertEqual(rehydrated.int1, 111)
+    self.assertEqual(rehydrated.int2, 222)
+    self.assertEqual(rehydrated.string1, '111')
+    self.assertEqual(rehydrated.string2, '222')
+
 
 if __name__ == '__main__':
   tf.test.main()
