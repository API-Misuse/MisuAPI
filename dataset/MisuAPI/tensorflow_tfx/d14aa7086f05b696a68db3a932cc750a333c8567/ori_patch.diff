commit d14aa7086f05b696a68db3a932cc750a333c8567
Author: tfx-team <tensorflow-extended-nonhuman@googlegroups.com>
Date:   Tue Jan 26 20:03:50 2021 -0800

    Introduce `NotFoundError` in `tfx.dsl.io.fileio` and remove dependency of `PythonExecutorOperator` on TensorFlow GFile.
    
    PiperOrigin-RevId: 354008399

diff --git a/RELEASE.md b/RELEASE.md
index 18e0bff1..3aeda01b 100644
--- a/RELEASE.md
+++ b/RELEASE.md
@@ -57,7 +57,9 @@
 *   Depends on `tensorflow-serving-api>=1.15,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,<3`.
 *   The `tfx.__version__` attribute was restored.
 *   Starting from this version, proto files which are used to generate
-    componnent-level configs are included in the `tfx` package directly.
+    component-level configs are included in the `tfx` package directly.
+*   The `tfx.dsl.io.fileio.NotFoundError` exception unifies handling of not-
+    found errors across different filesystem plugin backends.
 *   Depends on `apache-beam[gcp]>=2.27,<3`.
 *   Depends on `pyarrow>=1,<3`.
 *   Fixes the serialization of zero-valued default when using `RuntimeParameter`
diff --git a/tfx/components/example_gen/utils.py b/tfx/components/example_gen/utils.py
index 1dadf760..3402a12f 100644
--- a/tfx/components/example_gen/utils.py
+++ b/tfx/components/example_gen/utils.py
@@ -556,12 +556,7 @@ def _get_target_span_version(
   latest_version = None
   latest_version_int = None
 
-  try:
-    files = fileio.glob(split_glob_pattern)
-  except tf.errors.NotFoundError:
-    # TODO(b/168831931): fileio.glob shouldn't throw NotFoundError.
-    files = []
-
+  files = fileio.glob(split_glob_pattern)
   for file_path in files:
     match_span_tokens, match_span_int, match_version, match_version_int = (
         _find_matched_span_version_from_path(file_path, split_regex_pattern,
diff --git a/tfx/components/infra_validator/request_builder.py b/tfx/components/infra_validator/request_builder.py
index 6379dc48..3aacd874 100644
--- a/tfx/components/infra_validator/request_builder.py
+++ b/tfx/components/infra_validator/request_builder.py
@@ -187,10 +187,7 @@ class _BaseRequestBuilder(six.with_metaclass(abc.ABCMeta, object)):
         schema=None,
         read_as_raw_records=True,
         raw_record_column_name=_RAW_RECORDS_COLUMN)
-    try:
-      filenames = fileio.glob(glob_pattern)
-    except tf.errors.NotFoundError:
-      filenames = []
+    filenames = fileio.glob(glob_pattern)
     if not filenames:
       raise ValueError('Unable to find examples matching {}.'.format(
           glob_pattern))
diff --git a/tfx/dsl/io/fileio.py b/tfx/dsl/io/fileio.py
index 379bc850..b8abd52f 100644
--- a/tfx/dsl/io/fileio.py
+++ b/tfx/dsl/io/fileio.py
@@ -29,6 +29,10 @@ import tfx.dsl.io.plugins.local  # pylint: disable=unused-import, g-import-not-a
 import tfx.dsl.io.plugins.tensorflow_gfile  # pylint: disable=unused-import, g-import-not-at-top
 
 
+# Expose `NotFoundError` as `fileio.NotFoundError`.
+NotFoundError = filesystem.NotFoundError
+
+
 def _get_filesystem(path) -> Type[filesystem.Filesystem]:
   return (filesystem_registry.DEFAULT_FILESYSTEM_REGISTRY
           .get_filesystem_for_path(path))
diff --git a/tfx/dsl/io/filesystem.py b/tfx/dsl/io/filesystem.py
index d80d5d7f..caa12ee9 100644
--- a/tfx/dsl/io/filesystem.py
+++ b/tfx/dsl/io/filesystem.py
@@ -23,6 +23,10 @@ from typing import Any, Callable, Iterable, List, Text, Tuple, Union
 PathType = Union[bytes, Text]
 
 
+class NotFoundError(IOError):
+  pass
+
+
 class Filesystem(object):
   """Abstract Filesystem class."""
 
diff --git a/tfx/dsl/io/plugins/local.py b/tfx/dsl/io/plugins/local.py
index 6e7c0264..f5a62b79 100644
--- a/tfx/dsl/io/plugins/local.py
+++ b/tfx/dsl/io/plugins/local.py
@@ -36,7 +36,10 @@ class LocalFilesystem(filesystem.Filesystem):
 
   @staticmethod
   def open(name: PathType, mode: Text = 'r') -> Any:
-    return open(name, mode=mode)
+    try:
+      return open(name, mode=mode)
+    except FileNotFoundError as e:
+      raise filesystem.NotFoundError() from e
 
   @staticmethod
   def copy(src: PathType, dst: PathType, overwrite: bool = False) -> None:
@@ -44,7 +47,10 @@ class LocalFilesystem(filesystem.Filesystem):
       raise OSError(
           ('Destination file %r already exists and argument `overwrite` is '
            'false.') % dst)
-    shutil.copyfile(src, dst)
+    try:
+      shutil.copyfile(src, dst)
+    except FileNotFoundError as e:
+      raise filesystem.NotFoundError() from e
 
   @staticmethod
   def exists(path: PathType) -> bool:
@@ -60,7 +66,10 @@ class LocalFilesystem(filesystem.Filesystem):
 
   @staticmethod
   def listdir(path: PathType) -> List[PathType]:
-    return os.listdir(path)
+    try:
+      return os.listdir(path)
+    except FileNotFoundError as e:
+      raise filesystem.NotFoundError() from e
 
   @staticmethod
   def makedirs(path: PathType) -> None:
@@ -68,11 +77,17 @@ class LocalFilesystem(filesystem.Filesystem):
 
   @staticmethod
   def mkdir(path: PathType) -> None:
-    os.mkdir(path)
+    try:
+      os.mkdir(path)
+    except FileNotFoundError as e:
+      raise filesystem.NotFoundError() from e
 
   @staticmethod
   def remove(path: PathType) -> None:
-    os.remove(path)
+    try:
+      os.remove(path)
+    except FileNotFoundError as e:
+      raise filesystem.NotFoundError() from e
 
   @staticmethod
   def rename(src: PathType, dst: PathType, overwrite: bool = False) -> None:
@@ -80,15 +95,24 @@ class LocalFilesystem(filesystem.Filesystem):
       raise OSError(
           ('Destination path %r already exists and argument `overwrite` is '
            'false.') % dst)
-    os.rename(src, dst)
+    try:
+      os.rename(src, dst)
+    except FileNotFoundError as e:
+      raise filesystem.NotFoundError() from e
 
   @staticmethod
   def rmtree(path: PathType) -> None:
-    shutil.rmtree(path)
+    try:
+      shutil.rmtree(path)
+    except FileNotFoundError as e:
+      raise filesystem.NotFoundError() from e
 
   @staticmethod
   def stat(path: PathType) -> Any:
-    return os.stat(path)
+    try:
+      return os.stat(path)
+    except FileNotFoundError as e:
+      raise filesystem.NotFoundError() from e
 
   @staticmethod
   def walk(
@@ -96,7 +120,10 @@ class LocalFilesystem(filesystem.Filesystem):
       topdown: bool = True,
       onerror: Callable[..., None] = None
   ) -> Iterable[Tuple[PathType, List[PathType], List[PathType]]]:
-    yield from os.walk(top, topdown=topdown, onerror=onerror)
+    try:
+      yield from os.walk(top, topdown=topdown, onerror=onerror)
+    except FileNotFoundError as e:
+      raise filesystem.NotFoundError() from e
 
 
 filesystem_registry.DEFAULT_FILESYSTEM_REGISTRY.register(
diff --git a/tfx/dsl/io/plugins/local_test.py b/tfx/dsl/io/plugins/local_test.py
new file mode 100644
index 00000000..ea405774
--- /dev/null
+++ b/tfx/dsl/io/plugins/local_test.py
@@ -0,0 +1,68 @@
+# Copyright 2021 Google LLC. All Rights Reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+"""Tests for tfx.dsl.io.plugins.local."""
+
+from __future__ import absolute_import
+from __future__ import division
+from __future__ import print_function
+
+import os
+import tempfile
+
+import tensorflow as tf
+from tfx.dsl.io.filesystem import NotFoundError
+from tfx.dsl.io.plugins.local import LocalFilesystem
+
+
+class LocalTest(tf.test.TestCase):
+
+  def testNotFound(self):
+    temp_dir = tempfile.mkdtemp()
+
+    with self.assertRaises(NotFoundError):
+      LocalFilesystem.open(os.path.join(temp_dir, 'foo')).read()
+
+    with self.assertRaises(NotFoundError):
+      LocalFilesystem.copy(
+          os.path.join(temp_dir, 'foo'), os.path.join(temp_dir, 'bar'))
+
+    # No exception raised.
+    self.assertEqual(LocalFilesystem.glob(os.path.join(temp_dir, 'foo/*')), [])
+
+    # No exception raised.
+    self.assertEqual(
+        LocalFilesystem.isdir(os.path.join(temp_dir, 'foo/bar')), False)
+
+    with self.assertRaises(NotFoundError):
+      LocalFilesystem.listdir(os.path.join(temp_dir, 'foo'))
+
+    with self.assertRaises(NotFoundError):
+      LocalFilesystem.mkdir(os.path.join(temp_dir, 'foo/bar'))
+
+    with self.assertRaises(NotFoundError):
+      LocalFilesystem.remove(os.path.join(temp_dir, 'foo'))
+
+    with self.assertRaises(NotFoundError):
+      LocalFilesystem.rmtree(os.path.join(temp_dir, 'foo'))
+
+    with self.assertRaises(NotFoundError):
+      LocalFilesystem.stat(os.path.join(temp_dir, 'foo'))
+
+    # No exception raised.
+    self.assertEqual(
+        list(LocalFilesystem.walk(os.path.join(temp_dir, 'foo'))), [])
+
+
+if __name__ == '__main__':
+  tf.test.main()
diff --git a/tfx/dsl/io/plugins/tensorflow_gfile.py b/tfx/dsl/io/plugins/tensorflow_gfile.py
index 35473298..d874b66e 100644
--- a/tfx/dsl/io/plugins/tensorflow_gfile.py
+++ b/tfx/dsl/io/plugins/tensorflow_gfile.py
@@ -38,11 +38,16 @@ if tf:
 
     @staticmethod
     def open(name: PathType, mode: Text = 'r') -> Any:
+      # Because the GFile implementation delays I/O until necessary, we cannot
+      # catch `NotFoundError` here.
       return tf.io.gfile.GFile(name, mode=mode)
 
     @staticmethod
     def copy(src: PathType, dst: PathType, overwrite: bool = False) -> None:
-      tf.io.gfile.copy(src, dst, overwrite=overwrite)
+      try:
+        tf.io.gfile.copy(src, dst, overwrite=overwrite)
+      except tf.errors.NotFoundError as e:
+        raise filesystem.NotFoundError() from e
 
     @staticmethod
     def exists(path: PathType) -> bool:
@@ -50,7 +55,10 @@ if tf:
 
     @staticmethod
     def glob(pattern: PathType) -> List[PathType]:
-      return tf.io.gfile.glob(pattern)
+      try:
+        return tf.io.gfile.glob(pattern)
+      except tf.errors.NotFoundError:
+        return []
 
     @staticmethod
     def isdir(path: PathType) -> bool:
@@ -58,7 +66,10 @@ if tf:
 
     @staticmethod
     def listdir(path: PathType) -> List[PathType]:
-      return tf.io.gfile.listdir(path)
+      try:
+        return tf.io.gfile.listdir(path)
+      except tf.errors.NotFoundError as e:
+        raise filesystem.NotFoundError() from e
 
     @staticmethod
     def makedirs(path: PathType) -> None:
@@ -66,23 +77,38 @@ if tf:
 
     @staticmethod
     def mkdir(path: PathType) -> None:
-      tf.io.gfile.mkdir(path)
+      try:
+        tf.io.gfile.mkdir(path)
+      except tf.errors.NotFoundError as e:
+        raise filesystem.NotFoundError() from e
 
     @staticmethod
     def remove(path: PathType) -> None:
-      tf.io.gfile.remove(path)
+      try:
+        tf.io.gfile.remove(path)
+      except tf.errors.NotFoundError as e:
+        raise filesystem.NotFoundError() from e
 
     @staticmethod
     def rename(src: PathType, dst: PathType, overwrite: bool = False) -> None:
-      tf.io.gfile.rename(src, dst, overwrite=overwrite)
+      try:
+        tf.io.gfile.rename(src, dst, overwrite=overwrite)
+      except tf.errors.NotFoundError as e:
+        raise filesystem.NotFoundError() from e
 
     @staticmethod
     def rmtree(path: PathType) -> None:
-      tf.io.gfile.rmtree(path)
+      try:
+        tf.io.gfile.rmtree(path)
+      except tf.errors.NotFoundError as e:
+        raise filesystem.NotFoundError() from e
 
     @staticmethod
     def stat(path: PathType) -> Any:
-      return tf.io.gfile.stat(path)
+      try:
+        return tf.io.gfile.stat(path)
+      except tf.errors.NotFoundError as e:
+        raise filesystem.NotFoundError() from e
 
     @staticmethod
     def walk(
@@ -90,7 +116,10 @@ if tf:
         topdown: bool = True,
         onerror: Callable[..., None] = None
     ) -> Iterable[Tuple[PathType, List[PathType], List[PathType]]]:
-      yield from tf.io.gfile.walk(top, topdown=topdown, onerror=onerror)
+      try:
+        yield from tf.io.gfile.walk(top, topdown=topdown, onerror=onerror)
+      except tf.errors.NotFoundError as e:
+        raise filesystem.NotFoundError() from e
 
   filesystem_registry.DEFAULT_FILESYSTEM_REGISTRY.register(
       TensorflowFilesystem, priority=0, use_as_fallback=True)
diff --git a/tfx/dsl/io/plugins/tensorflow_gfile_test.py b/tfx/dsl/io/plugins/tensorflow_gfile_test.py
new file mode 100644
index 00000000..428d09f4
--- /dev/null
+++ b/tfx/dsl/io/plugins/tensorflow_gfile_test.py
@@ -0,0 +1,71 @@
+# Copyright 2021 Google LLC. All Rights Reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+"""Tests for tfx.dsl.io.plugins.tensorflow_gfile."""
+
+from __future__ import absolute_import
+from __future__ import division
+from __future__ import print_function
+
+import os
+import tempfile
+
+import tensorflow as tf
+
+from tfx.dsl.io.filesystem import NotFoundError
+from tfx.dsl.io.plugins.tensorflow_gfile import TensorflowFilesystem
+
+
+class TensorflowGfileTest(tf.test.TestCase):
+
+  def testNotFound(self):
+    temp_dir = tempfile.mkdtemp()
+
+    # Because the GFile implementation delays I/O until necessary, we cannot
+    # catch `NotFoundError` here, so this does not raise an error.
+    TensorflowFilesystem.open(os.path.join(temp_dir, 'foo'))
+
+    with self.assertRaises(NotFoundError):
+      TensorflowFilesystem.copy(
+          os.path.join(temp_dir, 'foo'), os.path.join(temp_dir, 'bar'))
+
+    # No exception raised.
+    self.assertEqual(
+        TensorflowFilesystem.glob(os.path.join(temp_dir, 'foo/*')), [])
+
+    # No exception raised.
+    self.assertEqual(
+        TensorflowFilesystem.isdir(os.path.join(temp_dir, 'foo/bar')), False)
+
+    with self.assertRaises(NotFoundError):
+      TensorflowFilesystem.listdir(os.path.join(temp_dir, 'foo'))
+
+    with self.assertRaises(NotFoundError):
+      TensorflowFilesystem.mkdir(os.path.join(temp_dir, 'foo/bar'))
+
+    with self.assertRaises(NotFoundError):
+      TensorflowFilesystem.remove(os.path.join(temp_dir, 'foo'))
+
+    with self.assertRaises(NotFoundError):
+      TensorflowFilesystem.rmtree(os.path.join(temp_dir, 'foo'))
+
+    with self.assertRaises(NotFoundError):
+      TensorflowFilesystem.stat(os.path.join(temp_dir, 'foo'))
+
+    # No exception raised.
+    self.assertEqual(
+        list(TensorflowFilesystem.walk(os.path.join(temp_dir, 'foo'))), [])
+
+
+if __name__ == '__main__':
+  tf.test.main()
diff --git a/tfx/orchestration/portable/python_executor_operator.py b/tfx/orchestration/portable/python_executor_operator.py
index d54b9c4c..a8949f58 100644
--- a/tfx/orchestration/portable/python_executor_operator.py
+++ b/tfx/orchestration/portable/python_executor_operator.py
@@ -15,7 +15,6 @@
 import sys
 from typing import Dict, List, Optional, cast
 
-import tensorflow as tf
 from tfx import types
 from tfx.dsl.components.base import base_executor
 from tfx.dsl.io import fileio
@@ -111,12 +110,11 @@ class PythonExecutorOperator(base_executor_operator.BaseExecutorOperator):
                          execution_info.exec_properties)
     if not result:
       # If result is not returned from the Do function, then try to
-      # read if from the executor_output_uri.
-      try:
-        with fileio.open(execution_info.execution_output_uri, 'rb') as f:
-          result = execution_result_pb2.ExecutorOutput.FromString(
-              f.read())
-      except tf.errors.NotFoundError:
+      # read from the executor_output_uri.
+      if fileio.exists(execution_info.execution_output_uri):
+        result = execution_result_pb2.ExecutorOutput.FromString(
+            fileio.open(execution_info.execution_output_uri, 'rb').read())
+      else:
         # Old style TFX executor doesn't return executor_output, but modify
         # output_dict and exec_properties in place. For backward compatibility,
         # we use their executor_output and exec_properties to construct
