commit caa1448559d70adb05f4da8bcc2eee893d93a09d
Author: Sergio Gomez <sergomez@google.com>
Date:   Thu Feb 9 16:53:58 2017 +0000

    Python 3 compatibility
    
    Fixes #8

diff --git a/convergence_test.py b/convergence_test.py
index 8940dfe..c0bb694 100644
--- a/convergence_test.py
+++ b/convergence_test.py
@@ -18,6 +18,7 @@ from __future__ import absolute_import
 from __future__ import division
 from __future__ import print_function
 
+from six.moves import xrange
 import tensorflow as tf
 
 import meta
diff --git a/evaluate.py b/evaluate.py
index 8565794..2d9d86e 100644
--- a/evaluate.py
+++ b/evaluate.py
@@ -18,6 +18,7 @@ from __future__ import absolute_import
 from __future__ import division
 from __future__ import print_function
 
+from six.moves import xrange
 import tensorflow as tf
 
 from tensorflow.contrib.learn.python.learn import monitored_session as ms
diff --git a/meta.py b/meta.py
index 41f4b10..9de24a1 100644
--- a/meta.py
+++ b/meta.py
@@ -182,7 +182,8 @@ def _make_nets(variables, config, net_assignments):
                        "a single net config.")
 
     with tf.variable_scope("vars_optimizer"):
-      key, kwargs = config.items()[0]
+      key = next(iter(config))
+      kwargs = config[key]
       net = networks.factory(**kwargs)
 
     nets = {key: net}
@@ -246,7 +247,7 @@ class MetaOptimizer(object):
   def save(self, sess, path=None):
     """Save meta-optimizer."""
     result = {}
-    for k, net in self._nets.iteritems():
+    for k, net in self._nets.items():
       if path is None:
         filename = None
         key = k
@@ -376,7 +377,7 @@ class MetaOptimizer(object):
                 nest.flatten(_nested_assign(state, s_final)))
 
     # Log internal variables.
-    for k, net in nets.iteritems():
+    for k, net in nets.items():
       print("Optimizer '{}' variables".format(k))
       print([op.name for op in nn.get_variables_in_module(net)])
 
diff --git a/meta_test.py b/meta_test.py
index b522d6e..0eb0c52 100644
--- a/meta_test.py
+++ b/meta_test.py
@@ -23,6 +23,7 @@ import tempfile
 
 from nose_parameterized import parameterized
 import numpy as np
+from six.moves import xrange
 import tensorflow as tf
 
 import meta
@@ -62,7 +63,7 @@ class L2LTest(tf.test.TestCase):
 
     # Torch results
     torch_cost = 0.7325327
-    torch_final_x = np.array([0.8559])
+    torch_final_x = 0.8559
 
     self.assertAlmostEqual(cost, torch_cost, places=4)
     self.assertAlmostEqual(final_x[0], torch_final_x, places=4)
@@ -208,7 +209,8 @@ class L2LTest(tf.test.TestCase):
 
       # Save optimizer.
       tmp_dir = tempfile.mkdtemp()
-      net_path = optimizer.save(sess, path=tmp_dir).keys()[0]
+      save_result = optimizer.save(sess, path=tmp_dir)
+      net_path = next(iter(save_result))
 
       # Retrain original optimizer.
       cost, x = train(sess, minimize_ops, num_unrolls, num_epochs)
diff --git a/networks.py b/networks.py
index 2c45058..86301be 100644
--- a/networks.py
+++ b/networks.py
@@ -38,7 +38,7 @@ def factory(net, net_options=(), net_path=None):
   net_options = dict(net_options)
 
   if net_path:
-    with open(net_path, "r") as f:
+    with open(net_path, "rb") as f:
       net_options["initializer"] = pickle.load(f)
 
   return net_class(**net_options)
@@ -56,7 +56,7 @@ def save(network, sess, filename=None):
     to_save[module_name][variable_name] = v.eval(sess)
 
   if filename:
-    with open(filename, "w") as f:
+    with open(filename, "wb") as f:
       pickle.dump(to_save, f)
 
   return to_save
diff --git a/nn/base.py b/nn/base.py
index f89eb2b..19ac0c2 100644
--- a/nn/base.py
+++ b/nn/base.py
@@ -24,8 +24,9 @@ from __future__ import division
 from __future__ import print_function
 
 import abc
-import types
 import six
+from six import string_types
+from six.moves import xrange
 import tensorflow as tf
 
 
@@ -116,7 +117,7 @@ class AbstractModule(object):
     Raises:
       ValueError: If name is not specified.
     """
-    if not isinstance(name, types.StringTypes):
+    if not isinstance(name, string_types):
       raise ValueError("Name must be a string.")
     self._is_connected = False
     self._template = tf.make_template(name, self._build,
diff --git a/nn/batch_norm.py b/nn/batch_norm.py
index c2c2795..f7a8b5b 100644
--- a/nn/batch_norm.py
+++ b/nn/batch_norm.py
@@ -22,6 +22,7 @@ from __future__ import absolute_import
 from __future__ import division
 from __future__ import print_function
 
+from six.moves import xrange
 import tensorflow as tf
 
 from tensorflow.contrib.layers.python.layers import utils
diff --git a/nn/convnet.py b/nn/convnet.py
index b7190dc..7a43ddf 100644
--- a/nn/convnet.py
+++ b/nn/convnet.py
@@ -19,6 +19,7 @@ from __future__ import print_function
 
 import collections
 
+from six.moves import xrange
 import tensorflow as tf
 
 from nn import base
diff --git a/nn/mlp.py b/nn/mlp.py
index 2cc7880..bfbb3c2 100644
--- a/nn/mlp.py
+++ b/nn/mlp.py
@@ -19,6 +19,7 @@ from __future__ import print_function
 
 import collections
 
+from six.moves import xrange
 import tensorflow as tf
 
 from nn import base
diff --git a/nn/rnn_core.py b/nn/rnn_core.py
index 02fdee5..bc2c6e2 100644
--- a/nn/rnn_core.py
+++ b/nn/rnn_core.py
@@ -27,6 +27,7 @@ import warnings
 
 
 import six
+from six.moves import xrange
 import tensorflow as tf
 
 from tensorflow.python.framework import tensor_shape
diff --git a/nn/util.py b/nn/util.py
index e8d4f58..ae59e65 100644
--- a/nn/util.py
+++ b/nn/util.py
@@ -109,7 +109,7 @@ def check_initializers(initializers, keys):
             ", ".join("'{}'".format(key) for key in keys)))
 
   def check_nested_callables(dictionary):
-    for key, entry in dictionary.iteritems():
+    for key, entry in dictionary.items():
       if isinstance(entry, dict):
         check_nested_callables(entry)
       elif not callable(entry):
@@ -156,7 +156,7 @@ def check_partitioners(partitioners, keys):
             ", ".join("'{}'".format(key) for key in keys)))
 
   def check_nested_callables(dictionary):
-    for key, entry in dictionary.iteritems():
+    for key, entry in dictionary.items():
       if isinstance(entry, dict):
         check_nested_callables(entry)
       elif not callable(entry):
diff --git a/problems_test.py b/problems_test.py
index f5be41d..53cb5ed 100644
--- a/problems_test.py
+++ b/problems_test.py
@@ -18,6 +18,7 @@ from __future__ import absolute_import
 from __future__ import division
 from __future__ import print_function
 
+from six.moves import xrange
 import tensorflow as tf
 
 from nose_parameterized import parameterized
diff --git a/train.py b/train.py
index 9a77bf4..95bf9bb 100644
--- a/train.py
+++ b/train.py
@@ -20,6 +20,7 @@ from __future__ import print_function
 
 import os
 
+from six.moves import xrange
 import tensorflow as tf
 
 from tensorflow.contrib.learn.python.learn import monitored_session as ms
diff --git a/util.py b/util.py
index 23d325a..49b38c7 100644
--- a/util.py
+++ b/util.py
@@ -22,6 +22,7 @@ import os
 from timeit import default_timer as timer
 
 import numpy as np
+from six.moves import xrange
 
 import problems
 
