commit 3698e34abfd6215605a21f28bb61dba872c5cc63
Author: Alon Eirew <alon.eirew@intel.com>
Date:   Sat Nov 10 14:12:13 2018 +0200

    better handle resource error messages when files not given or not it path

diff --git a/nlp_architect/data/cdc_resources/relations/referent_dict_relation_extraction.py b/nlp_architect/data/cdc_resources/relations/referent_dict_relation_extraction.py
index b143398..aed0df9 100644
--- a/nlp_architect/data/cdc_resources/relations/referent_dict_relation_extraction.py
+++ b/nlp_architect/data/cdc_resources/relations/referent_dict_relation_extraction.py
@@ -15,6 +15,7 @@
 # ******************************************************************************
 
 import logging
+import os
 from typing import Dict, List, Set
 
 from nlp_architect.common.cdc.mention_data import MentionDataLight
@@ -38,11 +39,15 @@ class ReferentDictRelationExtraction(RelationExtraction):
             ref_dict (required): str Location of referent dictionary file to work with
         """
         logger.info('Loading ReferentDict module')
-        if method == OnlineOROfflineMethod.OFFLINE:
-            self.ref_dict = load_json_file(ref_dict)
-        elif method == OnlineOROfflineMethod.ONLINE:
-            self.ref_dict = self.load_reference_dict(ref_dict)
-        logger.info('ReferentDict module lead successfully')
+        if ref_dict is not None and os.path.isfile(ref_dict):
+            if method == OnlineOROfflineMethod.OFFLINE:
+                self.ref_dict = load_json_file(ref_dict)
+            elif method == OnlineOROfflineMethod.ONLINE:
+                self.ref_dict = self.load_reference_dict(ref_dict)
+            logger.info('ReferentDict module lead successfully')
+        else:
+            raise FileNotFoundError('Referent Dict file not found or not in path..')
+
         super(ReferentDictRelationExtraction, self).__init__()
 
     def extract_all_relations(self, mention_x: MentionDataLight,
diff --git a/nlp_architect/data/cdc_resources/relations/verbocean_relation_extraction.py b/nlp_architect/data/cdc_resources/relations/verbocean_relation_extraction.py
index 0b4ea92..49f319d 100644
--- a/nlp_architect/data/cdc_resources/relations/verbocean_relation_extraction.py
+++ b/nlp_architect/data/cdc_resources/relations/verbocean_relation_extraction.py
@@ -15,6 +15,7 @@
 # ******************************************************************************
 
 import logging
+import os
 from typing import Dict, Set
 
 from nlp_architect.common.cdc.mention_data import MentionDataLight
@@ -38,11 +39,14 @@ class VerboceanRelationExtraction(RelationExtraction):
             vo_file (required): str Location of VerbOcean file to work with
         """
         logger.info('Loading Verb Ocean module')
-        if method == OnlineOROfflineMethod.OFFLINE:
-            self.vo = load_json_file(vo_file)
-        elif method == OnlineOROfflineMethod.ONLINE:
-            self.vo = self.load_verbocean_file(vo_file)
-        logger.info('Verb Ocean module lead successfully')
+        if vo_file is not None and os.path.isfile(vo_file):
+            if method == OnlineOROfflineMethod.OFFLINE:
+                self.vo = load_json_file(vo_file)
+            elif method == OnlineOROfflineMethod.ONLINE:
+                self.vo = self.load_verbocean_file(vo_file)
+            logger.info('Verb Ocean module lead successfully')
+        else:
+            raise FileNotFoundError('VerbOcean file not found or not in path..')
         super(VerboceanRelationExtraction, self).__init__()
 
     def extract_all_relations(self, mention_x: MentionDataLight,
diff --git a/nlp_architect/data/cdc_resources/relations/wikipedia_relation_extraction.py b/nlp_architect/data/cdc_resources/relations/wikipedia_relation_extraction.py
index 4a20e33..73e6806 100644
--- a/nlp_architect/data/cdc_resources/relations/wikipedia_relation_extraction.py
+++ b/nlp_architect/data/cdc_resources/relations/wikipedia_relation_extraction.py
@@ -17,6 +17,7 @@
 from __future__ import division
 
 import logging
+import os
 from typing import Set, List
 
 from nlp_architect.common.cdc.mention_data import MentionDataLight
@@ -50,13 +51,19 @@ class WikipediaRelationExtraction(RelationExtraction):
             index (required on Elastic mode): int the Elastic search index name
         """
         logger.info('Loading Wikipedia module')
+
         connectivity = method
         if connectivity == WikipediaSearchMethod.ONLINE:
             self.pywiki_impl = WikiOnline()
         elif connectivity == WikipediaSearchMethod.OFFLINE:
-            self.pywiki_impl = WikiOffline(wiki_file)
+            if wiki_file is not None and os.path.isdir(wiki_file):
+                self.pywiki_impl = WikiOffline(wiki_file)
+            else:
+                raise FileNotFoundError('Wikipedia resource file not found or not in path, '
+                                        'create it or change the initialization method')
         elif connectivity == WikipediaSearchMethod.ELASTIC:
             self.pywiki_impl = WikiElastic(host, port, index)
+
         logger.info('Wikipedia module lead successfully')
         super(WikipediaRelationExtraction, self).__init__()
 
diff --git a/nlp_architect/data/cdc_resources/relations/within_doc_coref_extraction.py b/nlp_architect/data/cdc_resources/relations/within_doc_coref_extraction.py
index f1b22c5..4baaba0 100644
--- a/nlp_architect/data/cdc_resources/relations/within_doc_coref_extraction.py
+++ b/nlp_architect/data/cdc_resources/relations/within_doc_coref_extraction.py
@@ -13,6 +13,8 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 # ******************************************************************************
+import logging
+import os
 from typing import List, Set
 
 from nlp_architect.common.cdc.mention_data import MentionData
@@ -20,6 +22,8 @@ from nlp_architect.data.cdc_resources.relations.relation_extraction import Relat
 from nlp_architect.data.cdc_resources.relations.relation_types_enums import RelationType
 from nlp_architect.utils.io import load_json_file
 
+logger = logging.getLogger(__name__)
+
 
 class WithinDocCoref(RelationExtraction):
     def __init__(self, wd_file: str):
@@ -29,8 +33,12 @@ class WithinDocCoref(RelationExtraction):
         Args:
             wd_file (required): str Location of within doc co-reference mentions file
         """
-        wd_mentions_json = load_json_file(wd_file)
-        self.within_doc_coref_chain = self.arrange_resource(wd_mentions_json)
+        logger.info('Loading Within doc resource')
+        if wd_file is not None and os.path.isfile(wd_file):
+            wd_mentions_json = load_json_file(wd_file)
+            self.within_doc_coref_chain = self.arrange_resource(wd_mentions_json)
+        else:
+            raise FileNotFoundError('Within-doc resource file not found or not in path')
         super(WithinDocCoref, self).__init__()
 
     @staticmethod
diff --git a/nlp_architect/data/cdc_resources/relations/wordnet_relation_extraction.py b/nlp_architect/data/cdc_resources/relations/wordnet_relation_extraction.py
index 32e7201..e625f7b 100644
--- a/nlp_architect/data/cdc_resources/relations/wordnet_relation_extraction.py
+++ b/nlp_architect/data/cdc_resources/relations/wordnet_relation_extraction.py
@@ -15,6 +15,7 @@
 # ******************************************************************************
 
 import logging
+import os
 from typing import Set, List
 
 from nlp_architect.common.cdc.mention_data import MentionDataLight
@@ -44,7 +45,11 @@ class WordnetRelationExtraction(RelationExtraction):
         if self.connectivity == OnlineOROfflineMethod.ONLINE:
             self.wordnet_impl = WordnetOnline()
         elif self.connectivity == OnlineOROfflineMethod.OFFLINE:
-            self.wordnet_impl = WordnetOffline(wn_file)
+            if wn_file is not None and os.path.isdir(wn_file):
+                self.wordnet_impl = WordnetOffline(wn_file)
+            else:
+                raise FileNotFoundError('WordNet resource directory not found or not in path')
+
         logger.info('Wordnet module lead successfully')
         super(WordnetRelationExtraction, self).__init__()
 
diff --git a/nlp_architect/models/cross_doc_coref/cdc_config.py b/nlp_architect/models/cross_doc_coref/cdc_config.py
index b8ba7b9..fb54170 100755
--- a/nlp_architect/models/cross_doc_coref/cdc_config.py
+++ b/nlp_architect/models/cross_doc_coref/cdc_config.py
@@ -92,7 +92,7 @@ class EventConfig(CDCConfig):
         ]
 
         self.gold_mentions_file = LIBRARY_ROOT + \
-            '/datasets/cdc/gold_mentions/ecb_test_event_gold_mentions.json'
+            '/datasets/ecb/ecb_all_event_mentions.json'
 
 
 class EntityConfig(CDCConfig):
@@ -120,4 +120,4 @@ class EntityConfig(CDCConfig):
         ]
 
         self.gold_mentions_file = LIBRARY_ROOT + \
-            '/datasets/cdc/gold_mentions/ecb_test_entity_gold_mentions.json'
+            '/datasets/ecb/ecb_all_entity_mentions.json'
