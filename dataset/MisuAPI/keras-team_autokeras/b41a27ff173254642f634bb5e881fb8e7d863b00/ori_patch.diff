commit b41a27ff173254642f634bb5e881fb8e7d863b00
Author: Yashwanth Reddy <yashwanth95tuniki@gmail.com>
Date:   Tue Dec 18 16:01:52 2018 -0600

    [MRG] Face detection pretrained (resolves #332) (#384)
    
    * pretrained model for face detection
    
    * added a test for face detection
    
    * raise error when no image exists in the path
    
    * modified the test case
    
    * changed constant to uppercase
    
    * moved downloading models into load()
    
    * added docstrings
    
    * handled case when output file is None

diff --git a/autokeras/image/face_detection_pretrained.py b/autokeras/image/face_detection_pretrained.py
index 8560914..7d52621 100644
--- a/autokeras/image/face_detection_pretrained.py
+++ b/autokeras/image/face_detection_pretrained.py
@@ -596,5 +596,6 @@ def detect_faces(pnet_path, rnet_path, onet_path, img_path, output_file_path):
     img = cv2.imread(img_path)
     img_bg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
     bboxs, landmarks = mtcnn_detector.detect_face(img)
-    vis_face(img_bg, bboxs, output_file_path, landmarks)
+    if output_file_path is not None:
+        vis_face(img_bg, bboxs, output_file_path, landmarks)
     return bboxs, landmarks
diff --git a/autokeras/pretrained.py b/autokeras/pretrained.py
index 0af0adb..d5f55e3 100644
--- a/autokeras/pretrained.py
+++ b/autokeras/pretrained.py
@@ -34,6 +34,8 @@ class Pretrained(ABC):
 
 
 class FaceDetectionPretrained(Pretrained):
+    """A class to predict faces using the MTCNN pre-trained model.
+    """
 
     def __init__(self):
         super(FaceDetectionPretrained, self).__init__()
@@ -46,6 +48,18 @@ class FaceDetectionPretrained(Pretrained):
         self.pnet, self.rnet, self.onet = Constant.FACE_DETECTION_PRETRAINED['FILE_PATHS']
 
     def predict(self, img_path, output_file_path=None):
+        """Predicts faces in an image.
+
+        Args:
+            img_path: A string. The path to the image on which the prediction is to be done.
+            output_file_path: A string. The path where the output image is to be saved after the prediction. `None` by default.
+
+        Returns:
+            A tuple containing numpy arrays of bounding boxes and landmarks. Bounding boxes are of shape `(n, 5)` and
+            landmarks are of shape `(n, 10)` where `n` is the number of faces predicted. Each bounding box is of length
+            5 and the corresponding rectangle is defined by the first four values. Each bounding box has five landmarks
+            represented by 10 coordinates.
+        """
         if not os.path.exists(img_path):
             raise ValueError('Image does not exist')
         return detect_faces(self.pnet, self.rnet, self.onet, img_path, output_file_path)
diff --git a/tests/test_pretrained.py b/tests/test_pretrained.py
index e345a0d..323d1d6 100644
--- a/tests/test_pretrained.py
+++ b/tests/test_pretrained.py
@@ -9,8 +9,9 @@ def test_face_detection():
     if os.path.exists(out_file):
         os.remove(out_file)
     face_detection = FaceDetectionPretrained()
-    bboxs, landmarks = face_detection.predict(img_file, out_file)
+    bboxs1, landmarks1 = face_detection.predict(img_file, out_file)
     assert os.path.exists(out_file)
+    bboxs2, landmarks2 = face_detection.predict(img_file)
+    assert bboxs1.shape == bboxs2.shape == (11, 5) and landmarks1.shape == landmarks2.shape == (11, 10)
     os.remove(img_file)
     os.remove(out_file)
-    assert bboxs.shape == (11, 5) and landmarks.shape == (11, 10)
